nuxtレンダリングモード
１．クライアントサイドレンダリング、SPA
	nuxt.config、ssr: false
	npx nuxi generate
	.output/public以下をwebサーバーにホスティングさせる、静的サイトとしてデプロイする
	javascript実行環境はクライアントサイドのみ
	サーバー側では、一切レンダリングしない
	レンダリングはクラインアトオンリーなので、htmlの中身はほぼscriptタグで埋め尽くされているので、SEO的に不利？
	JavaScriptがメインとなっているためSEOには不利に働きます。
２．ユニバーサルレンダリング
	サーバーサイド(Node.js)でもレンダリング
	クライアントサイド(つまりブラウザ環境)でもレンダリングし（クライアントサイドレンダリングと同じリアクティブ性を後付けで追加する）、
	その結果を既存のHTML（サーバーサイドレンダリング結果）に融合します。
	この２つがハイドレーションステップ
	サーバー、クライアントサイド双方でレンダリングされるため、ユニバーサルレンダリングという名称となっています。
	実装時はサーバー(Node.js等)、各種ブラウザ双方で動くことを保証する必要があり、
	不用意にwindow.location等ブラウザ固有のAPIを使おうとすれば、サーバーサイドでのレンダリング時にエラーとなります。
	nuxt.config、ssr: true
	npx nuxi build
	.output以下にサーバー実行モジュール（nitroサーバーも）が配置される
	node .output/server/index.mjs
３，プリレンダリング
	nuxt.config、ssr: true
	npx nuxi generate
	.output/pubic以下にHTMLが出力される、index.htmlなど、静的
	このディレクトリ配下を任意のホスティング環境に配置、つまり.output以下にはnitro関連モジュールはない？
	クライアントサイドレンダリングと違い、htmlの中身はgenerate時にある程度レンダリングされているので、SEO対策にはなる？
	デプロイ的にはクライアントレンダリングと同じように、静的サイトとしてデプロイするだけ


